<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Areas on</title><link>https://prachee.me/tags/Areas/</link><description>Recent content in Areas on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://prachee.me/tags/Areas/index.xml" rel="self" type="application/rss+xml"/><item><title>Alpha-beta Pruning</title><link>https://prachee.me/notes/Alpha-beta-Pruning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Alpha-beta-Pruning/</guid><description>Search algorithm that decreases the number of gate states to evaluate in [[Braitenberg vehicles|Braitenberg vehicles]] in the game tree.
Stopping condition: It does not evaluate further when it realizes that there is already an existing better alternative.</description></item><item><title>Assumptions of Linear Regression</title><link>https://prachee.me/notes/Assumptions-of-Linear-Regression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Assumptions-of-Linear-Regression/</guid><description>Anscombe&amp;rsquo;s Quartet - A group of four data sets with nearly identical descriptive statistics, yet different distributions and graphs. These are prime examples of why it&amp;rsquo;s important to be selective on when to use linear regression!</description></item><item><title>Avro</title><link>https://prachee.me/notes/Avro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Avro/</guid><description>Each record has a header that describes the structure of data it contains Data is stored as binary information, and information in header is used to parse data and extract fields Good format for compressing data, minimize storage and network bandwidth requirements Evolution of data formats to Avro: With [[notes/Delimited Text Files|Delimited Text Files]], there are some disadvantages:</description></item><item><title>BLOB</title><link>https://prachee.me/notes/BLOB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/BLOB/</guid><description>Binary Large Object
All files are stored as binary data Commonly used to store images, video, audio and app-specific documents</description></item><item><title>Braitenberg vehicles</title><link>https://prachee.me/notes/Braitenberg-vehicles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Braitenberg-vehicles/</guid><description>Source: Braitenberg Vehicle Wiki
This was a thought experiment by Valentino Braitenberg.
In the simplest form of this experiment, a Braitenberg vehicle is a machine with a light sensor and a motor.</description></item><item><title>Collector's Fallacy</title><link>https://prachee.me/notes/Collectors-Fallacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Collectors-Fallacy/</guid><description>To know about something is not the same as knowing something.
The idea here is that we like collecting information, hoping that it will be useful down the way.</description></item><item><title>Compiled and Interpreted Languages</title><link>https://prachee.me/notes/Compiled-and-Interpreted-Languages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Compiled-and-Interpreted-Languages/</guid><description>All in all, both compilers and interpreters will convert human-readable code (unless it&amp;rsquo;s brainfuck) and convert it to computer-readable machine code.</description></item><item><title>Data Formats</title><link>https://prachee.me/notes/Data-Formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Data-Formats/</guid><description>[!tip] TLDR
Data can be structured, unstructured or aggregated Structured data is data that can be modelled. For example, text, numbers can fit into data tables Unstructured data is data that is hard to model due it&amp;rsquo;s size or nature.</description></item><item><title>Data Stores and Data Processing</title><link>https://prachee.me/notes/Data-Stores-and-Data-Processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Data-Stores-and-Data-Processing/</guid><description>There are two broad categories of data store:
[[File Stores]] [[Databases]] There are two ways to process data:</description></item><item><title>Data Structures and Algorithms</title><link>https://prachee.me/notes/Data-Structures-and-Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Data-Structures-and-Algorithms/</guid><description>Algorithm: Set of steps that transforms an input to desired output, often to solve some computational problem Data Structures: Way to store and organize data</description></item><item><title>Database Transactions</title><link>https://prachee.me/notes/Database-Transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Database-Transactions/</guid><description>ACID and BASE: Database Transactions Following a chemistry analogy, we can measure a pH of a database where:
ACID databases is for applications that need consistency and reliability BASE databases is for applications that need availability, flexibility and scalability ACID is an acronym that refers to 4 properties a transaction should uphold for reliability of data: Atomicity, Consistency, Isolation, Durability</description></item><item><title>Databases</title><link>https://prachee.me/notes/Databases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Databases/</guid><description>Central system where data is stored and searched through
[[Relational Databases]] [[Non-relational Databases]]</description></item><item><title>Delimited Text Files</title><link>https://prachee.me/notes/Delimited-Text-Files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Delimited-Text-Files/</guid><description>Technology examples: CSV, TSV files
Stored in plain text format with specific field delimiters and row terminators In CSV (comma-separated values), field delimiters = comma and row terminators = new line First line may contain title to columns Also, TSV (tab-separated values) with only difference being field delimiters = tabs Space-delimited where spaces and tabs are used to separate columns Fixed-width data where each field has fixed number of characters More detailed explanation here: https://www.</description></item><item><title>Elementary Graph Algorithms.</title><link>https://prachee.me/notes/Elementary-Graph-Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Elementary-Graph-Algorithms/</guid><description>A graph $G = (V, E)$ is composed of $V$, a set of vertices and $E \in V \times V$ The two standard way of representing a graph is: Adjacency List Good idea when representing sparse graphs i.</description></item><item><title>Ethics in AI</title><link>https://prachee.me/notes/Ethics-in-AI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Ethics-in-AI/</guid><description>AI and Society
The big question has always been will AI destroy jobs? AI will replace the unpleasant or dangerous jobs, completing tasks with more efficiency and precision Rise of AI accelerates growth/consumption spiral Companies want to lower prices, laying off workers to cut costs Lower prices is higher demand, so higher production (using more resources here) In modern countries, where population doesn&amp;rsquo;t grow, individual person must consume more (marketing helps with this!</description></item><item><title>File Access Mechanisms in Filesystems</title><link>https://prachee.me/notes/File-Access-Mechanisms-in-Filesystems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/File-Access-Mechanisms-in-Filesystems/</guid><description>Files usually have some permissions associated with them:
Read Write Execute Append (write at the end of the file) Delete List (view the attributes of the file) Access control</description></item><item><title>File Stores</title><link>https://prachee.me/notes/File-Stores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/File-Stores/</guid><description>Store data in files
The file format used to store data depends on:
[[notes/Data Formats|Type of data to be stored]] Application/Services that need to interact (i.</description></item><item><title>File System</title><link>https://prachee.me/notes/File-System/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/File-System/</guid><description>File System The file system provides organization for the files through a directory structure + maintains metadata related to files.</description></item><item><title>First-Order Logic</title><link>https://prachee.me/notes/First-Order-Logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/First-Order-Logic/</guid><description>Gödel&amp;rsquo;s Theorems i.e. [[Gödel&amp;rsquo;s Completeness Theorem]] and [[Gödel&amp;rsquo;s Incompleteness Theorem]] were important to AI.
From the completeness theorem, automatic theorem provers were created - In the 1950s, the Logic Theorist was made to show computers could process numbers and symbols.</description></item><item><title>Function Composition in JavaScript</title><link>https://prachee.me/notes/Function-Composition-in-Javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Function-Composition-in-Javascript/</guid><description>JavaScript is a multi-paradigm programming language - it has supports for several [[Programming Paradigm]], including [[Functional Programming]].
Function Piping vs. Composition</description></item><item><title>Functional Programming</title><link>https://prachee.me/notes/Functional-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Functional-Programming/</guid><description>What is Functional Programming? A [[Programming Paradigm]].
The main focus is on &amp;ldquo;what are we trying to solve&amp;rdquo;, rather than &amp;ldquo;how are we trying to solve&amp;rdquo; - It&amp;rsquo;s a declarative type of programming</description></item><item><title>Gödel's Completeness Theorem</title><link>https://prachee.me/notes/G%C3%B6dels-Completeness-Theorem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/G%C3%B6dels-Completeness-Theorem/</guid><description>For any collection of first-order statements, every semantic implication of those statements is syntactically provable within first-order logic.
Simply put,</description></item><item><title>Gödel's Incompleteness Theorem</title><link>https://prachee.me/notes/G%C3%B6dels-Incompleteness-Theorem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/G%C3%B6dels-Incompleteness-Theorem/</guid><description>Source: Numberphile on Gödel&amp;rsquo;s Incompleteness Theorem
The simple idea: There might be a conjecture that&amp;rsquo;s true, but there is no way to prove it.</description></item><item><title>Higher-Order Functions</title><link>https://prachee.me/notes/Higher-Order-Functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Higher-Order-Functions/</guid><description>A higher-order function is a function which takes a function as a parameter or which returns the function or both. In JavaScript, an example of this is setTimeout() where one of the parameters is a function we run after some time is passed.</description></item><item><title>Image Feature Vector</title><link>https://prachee.me/notes/Image-Feature-Vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Image-Feature-Vector/</guid><description>A way to abstract information i.e. image, so that it&amp;rsquo;s numerically quantifiable. Simply put, a list of numbers that represents an image.</description></item><item><title>Image Formats &amp; Compression Comparision</title><link>https://prachee.me/notes/Image-Formats-Compression-Comparision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Image-Formats-Compression-Comparision/</guid><description>Digital graphic files will generally fall into two categories:
Raster graphics are created using a grid of tiny pixels, making them very simple Vector graphics are creating using detailed paths of points &amp;amp; lines to render images.</description></item><item><title>Interrupts and System Calls</title><link>https://prachee.me/notes/Interrupts-and-System-Calls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Interrupts-and-System-Calls/</guid><description>To execute a program, the components for a minimal set are:
Main memory System Bus Processor Within this, we have a I/O communicating data to us that requires some processing Central Processing Unit (with a Control Unit and ALU) communicates with memory unit.</description></item><item><title>Introduction to OS</title><link>https://prachee.me/notes/Introduction-to-OS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Introduction-to-OS/</guid><description>Operating System: It sits between hardware and programs. OS as a Resource Manager, the &amp;ldquo;secretary&amp;rdquo; of the system
Responsible for resource managements and allocation, cause resources (e.</description></item><item><title>JSON</title><link>https://prachee.me/notes/JSON/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/JSON/</guid><description>JavaScript Object Notation, hierarchical document schema to define objects with many attributes
Best demonstrated with an example:
1 2 3 4 5 6 7 8 9 10 11 12 13 { &amp;#34;fruits&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;apple&amp;#34;, &amp;#34;colour&amp;#34;: [&amp;#34;red&amp;#34;] }, { &amp;#34;name&amp;#34;: &amp;#34;orange&amp;#34;, &amp;#34;colour&amp;#34;: [&amp;#34;orange&amp;#34;], &amp;#34;taste&amp;#34;: &amp;#34;interesting&amp;#34; } ] }</description></item><item><title>Lexer</title><link>https://prachee.me/notes/Lexer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Lexer/</guid><description>Lexing, short for lexical analysis, takes in source code as series of characters and creates a series of chunks called tokens.</description></item><item><title>Multiple Linear Regression</title><link>https://prachee.me/notes/Multiple-Linear-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Multiple-Linear-Programming/</guid><description>Statistical technique that uses two or more independent variables to predict the outcome of a dependent variable
determine the relative contribution of each independent variable in total variance Equation of Multiple Linear Regression: $y = b_0 + b_1X_1 + b_2X_2 + + b_3X_3 + &amp;hellip; + b_nX_n$</description></item><item><title>Non-relational Databases</title><link>https://prachee.me/notes/Non-relational-Databases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Non-relational-Databases/</guid><description>Data management system where there is no relational schema, also called No-SQL databases
Key-value databases Each record has a key with some data associated to it (in any format) Document databases Key-value database where value is a JSON document Column family databases Store data in rows and columns, where columns can be grouped into column-families For example, Customer family might have Name column, Address column etc.</description></item><item><title>ORC</title><link>https://prachee.me/notes/ORC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/ORC/</guid><description>Optimized Row Columnar Format, organized into columns that optimize read/write operations for Apache Hive
Apache Hive: data warehouse that has fast data summarization and querying over large datasets Columnar storage format to allow for optimized column-based operations like filtering/aggregation ORC stores data in a series of stripes where each strip is a collection of rows.</description></item><item><title>Parquet</title><link>https://prachee.me/notes/Parquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Parquet/</guid><description>Open-source columnar storage file format used for big data processing
Columnar storage format to allow for optimized column-based operations like filtering/aggregation Data in parquet file is divided into columns, and groups of columns are organized into row groups each row group contains a section of data, and group of columns are organized into row groups each row group has some data, and columns within a row group are stored together Parquet files contains metadata that define structure of data.</description></item><item><title>Parsing</title><link>https://prachee.me/notes/Parsing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Parsing/</guid><description>A parser turns the list of tokens generated from the [[notes/Lexer|Lexer]] into a tree of nodes, called an Abstract Syntax Tree (AST).</description></item><item><title>Programming Paradigm</title><link>https://prachee.me/notes/Programming-Paradigm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Programming-Paradigm/</guid><description>Definition: Methods or set of rules to structure code and solve a problem
The common types of paradigm:
Procedural Programming Logical Programming [[Functional Programming]] Object-oriented Programming</description></item><item><title>Sorting</title><link>https://prachee.me/notes/Sorting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Sorting/</guid><description>Personal effort to document every sorting algorithm that I could get my hands on:
Insertion Sort Merge Sort [[Heap Sort]] Quicksort Counting Sort Radix Sort Bucket Sort</description></item><item><title>Transactional Data Processing</title><link>https://prachee.me/notes/Transactional-Data-Processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Transactional-Data-Processing/</guid><description>Record transactions that capture business events a company wants to track
Think of financial transactions: a bank would capture when money is deposited or taken out.</description></item><item><title>XML</title><link>https://prachee.me/notes/XML/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/XML/</guid><description>Markup language that provides rules to define data
tags in XML are markup symbols to define data allows for data coding to get information flows across systems XML schema (XSD): document that describes rules on structure of XML file XML parser: process or read XML files to extract data, check syntax or validate against schema Note: While similar in appearances, this is different from HTML ability to define custom tags, as opposed to pre-defined HTML tags HTML is for content, XML stores and transports data XML is case-sensitive, HTML is not.</description></item><item><title>Zettel</title><link>https://prachee.me/notes/Zettel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Zettel/</guid><description>Essentially, a single note on one particular topic! The anatomy of a zettel looks like:
Unique Identifier: an unambiguous address This is mandatory!</description></item><item><title>Zettelkasten</title><link>https://prachee.me/notes/Zettelkasten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Zettelkasten/</guid><description>Note: I&amp;rsquo;m referencing zettelkasten.de to understand how to incorporate this into my daily note-taking!
Contrary to what a &amp;ldquo;[[Zettel]]&amp;rdquo; should be, i.</description></item><item><title>🔭 Areas</title><link>https://prachee.me/notes/Areas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://prachee.me/notes/Areas/</guid><description>This space is designed to store important metadata regarding files in this section.
Artificial Intelligence
[[Alpha-beta Pruning]] [[Assumptions of Linear Regression]] [[Multiple Linear Programming]] [[Ethics in AI]] Computer Science</description></item></channel></rss>